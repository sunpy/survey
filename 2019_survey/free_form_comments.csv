"Do you have any comments? (This is a free form response; comments are not required. Please feel free to give us feedback about topics like: version control, collaborative coding platforms such as Github, standard or best practices in coding, operating systems, text editors, or your personal experience with writing code and releasing software, or general thoughts about SunPy)."
Only wish that some formal programming training was standard in the undergrad/grad curriculum. 
I think version control and backward compatibility may be taken into some more serious consideration as SunPy goes into future. Sometimes I got frustrated as some scripts I wrote that utilize functions from earlier versions of SunPy do not work anymore after updating SunPy to a newer version.
SunPy is great and I do 95% of my coding in Python. But I still have to use IDL/SolarSoft for the aia_prep function because I am under the impression the equivalent function in SunPy does not produce the same results. This single routine means I still require an IDL license. 
I've not published any papers yet.
The barriers between creating a work flow on a personal workstation and commercial/private cloud are significant. I am not sure where to begin transitioning from using everything local to making use of a cloud environment. 
I shifted from IDL/SSW to Python/Sunpy when I moved to the private university from the national institute. I think that development of Sunpy is very useful for Solar Physics Community to promote the scientist communications across the science fields because most scientist in the other astronomy field recently use Python as a main software for data analysis.
"My background is more IDL based. I have been trying python and would like to use it more, but the difficulty is the large amount of heritage code  I have in IDL, and the fact that converting it would be time consuming. "
Institutional researchers aren't the only people using SunPy.
"I created an English wikipedia item for SunPy, but it was deleted again and again.
https://en.wikipedia.org/wiki/SunPy . However, I created a Chinese version https://zh.wikipedia.org/wiki/SunPy . It seems that the English speaking community does not recognize the status of SunPy.   "
I am hesitating re IDL > Python waiting for complete SolarSoft port.
My only issue with SunPy is it should have better documentation describing the code properly. This could be a good task for summer students?
"I started doing solar research using IDL and am in the process of trying to convert to using Python and Sunpy as my primary programming environment. I am finding it particularly difficult to make this transition cleanly because my work relies on a number of programs and packages written in IDL. As such, I'm in a position of having to run most of my analysis in IDL and then adapt the outputs so that they can be manipulated and visualized in Python."
"General thoughts about SunPy: a major turnoff is the naming convention in variables (that is, the lack of) and syntax of functions.  The variables are rarely given descriptive names, and the functions require some horrid syntax.  For example, from the SunPy tutorial, consider this ugly code: aia = sunpy.map.Map(sunpy.data.sample.AIA_171_IMAGE).  This is hideous, and strongly discourages me from adopting SunPy.  (map.Map?  Really?  And it's even case sensitive?)

"
"We develop applications primarily for local, specialized use, which are then extended for community/shared use. In my view, the area where SunPy should put resources is in providing facility (information, user guides, platforms) for making this transition as seamless as possible. Specifically, guidelines or tools for code version control BEFORE software is released for general use would be appreciated."
Version control (SVN) plus openly shared software (Python
"I love using SunPy, but sometimes feel as if I am in an infinite loop when using the documentation.  I have been very impressed though, with the responsiveness of the developers to my questions.   "
Not yet used SunPy
"Replacing the core functionality of Solarsoft would be a ""game changer"". "
"SunPy should aim to expand its reach to more instruments. Especially, in regards to future missions like solar orbiter, JVLA, SKA etc.. This way you guys can become more relevant in the solar physics community. 

SunPy actually can expand quickly w.r.t radio studies of Sun. One can develop modules by using python-based CASA and existing SDO instruments. This would be very useful for the solar community as radio wavelengths are slowly becoming mainstream in solar physics."
"I think it is good to share software that one has written and that may be of use for the community. However, I have not done that, mostly because I dont think I am an expert programmer or because my code works ""for me"" but not in general cases.      Citing software seems more useful if the software computes scientific results, e.g. ADIPLS, GYRE, MESA, ... I am not sure whether tools, e.g. python packages for reading/ writing MESA models, etc. should be cited or acknowledged. So far, I tried to acknowledge such tools if I used them. I guess SunPy is somewhere in between these two cases. But since journals offer the possibility to do software papers nowadays, I think one should cite them if used!"
sunpy will highly take advantages for students and faculty that IDL comes with high cost
"I'm a data manager and don't publish my own research, so my responses may not be applicable. I would think researchers using specialized software and open-source software should cite these packages."
"SunPy is generally great and very useful for my work. However, I find following examples to be the easiest way to understand how to use various codes, and it seems to me that there are not enough examples and/or the examples given are overly simplified or generic. There are often keyword options for routines that either don't have example usage or clear usage documentation. It would also be nice to have access to the ephemeris data for various satellites/instruments without necessarily having to read in actual data."
Please send us the survey results including the error bars. 
"One issue that came up in a discussion recently was how code sharing is not currently well incentivized. In particular, it takes significant time investment to develop code for public release, and it is unclear if that work (which amounts to community service in some respect) is properly valued when it comes to job applications and career advancement compared to e.g. publications."
SolarSoft and IDL are very important to me.
"SunPy is a great tool to bring observational solar physics into the python environment. At this time there is no significant SunPy support for widely used data driven models (PFSS, CHANTI, WSA, ENLIL, NLFF, BATS-R-US, etc.). For SunPy to support the entire field, I would like to see affiliated modeling packages too.  "
Plan to start learning Python
"I switched to Python a few years ago but still have to deal with several astronomy IDL packages.  The engineering work I do is split between Matlab, Mathematica and various professional engineering packages, mostly in Windows (unfortunately).  There is a big difference between a quick-and-dirty proof of concept with data analysis scripts, and industrial strength, error proof automated software package development. I have no formal training in coding practices though some branches of astronomy are moving that direction.  Some large professional engineering packages come with scripting languages (ZPL in Zemax for instance) and often simple (messy) code is enough to prove that an algorithm works or get a quick result.  I have no desire to retrain as a software engineer as those professionals with far better skills are engaged in most package development efforts I've seen.  I would never attempt to write software packages for distribution without engaging an actual professional. "
"We need more robust approaches to reproducibility in software-based numerical and theoretical studies.  The standards in solar physics are well behind other fields, and many solar physics publications would be rejected out of hand in the physics (PRL, PRF, etc.) and fluid dynamics (JFM, etc.) journals.  This stems from fundamental non-reproducibility of much of the solar work, especially work built around closed-source code communities.  It's time for us as a discipline to embrace well documented best practices."
Need IRIS IDL tools re-written SunPy.    PyRAF/IRAF is still very useful to observational astronomers.
"sunPy will prevail eventually, it needs time and big projects, e.g., space instruments and DKIST!, to adopt it first."
Am sick of IDL and am planning to transition to SunPy.
"The problem with SunPy that it lacks the detailed _prep routines as they are available in solarsoft now. For instance, the aia_prep has a lot of detail in solarsoft, but in python it is only a few lines. I am sure the other lines are there for a good reason. Usually I end up doing the aia_prep in IDL, and then transfer the data to python to work with."
"I have become productive with Python and Jupyter notebooks in just the past year, but am not yet making use of SunPy. I enjoy playing with Python, but since I have little prior background in object oriented coding, and since Python has an idiosyncratic approach to array indexing, I find that it comes a bit slowly to me."
"I am hoping to find time to learn more about SunPy, so that I can move away from IDL at some point. A training course would be great."
IDL documentation is always easier to follow. Can't put finger on why.
"There should be more formal training, available to researchers at all points in academic life, regarding the topics you mentioned above (version control, coding practices, etc.)

"
